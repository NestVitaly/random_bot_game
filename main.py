# –ë–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–≥—Ä
import telebot
from telebot import types
import random
import time

while True:
    try:
        print('Bot started...')
        bot = telebot.TeleBot('6104388060:AAGuE2Kcqh49lzl-qyYPdofFrdsOK8htv0g')

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        kb_timing = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        kb_exit = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb_random = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb_random_timing = types.ReplyKeyboardMarkup(resize_keyboard=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        games = types.InlineKeyboardButton(text='–°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞ üé∞')
        members = types.InlineKeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ üë®‚Äçüë©‚Äçüëß‚Äçüë¶')
        timing = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üï∞Ô∏è')
        fast = types.InlineKeyboardButton(text='–ë—ã—Å—Ç—Ä–∞—è üèÉ')
        middle = types.InlineKeyboardButton(text='–°—Ä–µ–¥–Ω—è—è üö∂')
        longest = types.InlineKeyboardButton(text='–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω')
        exit = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô')

        kb.add(games, members, timing)
        kb_timing.add(fast, middle, longest)
        kb_random.add(games)
        kb_random_timing.add(members, games)
        kb_exit.add(exit)


        games = [
            ["–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", 1, 5, "–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω"],
            ['–ì—Ä–∞–≤–∏—Ç–∏ –§–æ–ª–ª–∑', 1, 5, "–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω"],
            ['–£–∂–∞—Å –ê—Ä–∫—Ö—ç–º–∞', 1, 6, '–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω'],
            ['Exit', 1, 99, '–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω'],
            ['–ö–ª–∞—É—Å—Ç—Ä–æ—Ñ–æ–±–∏—è', 1, 99, '–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω'],
            ['–î–∂–µ–Ω–≥–∞', 1, 99, '–°—Ä–µ–¥–Ω—è—è üö∂'],
            ['–ü–æ–±–µ–≥ –∏–∑ –ø—Å–∏—Ö—É—à–∫–∏', 1, 99, '–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω']
        ]


        # –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–≥—Ä—ã –ø–æ –∏–≥—Ä–æ–∫–∞–º
        def get_game(players):
            ch_games = []
            for game in games:
                if game[1] <= players <= game[2]:
                    ch_games.append(game[0])
            if len(ch_games) > 0:
                return random.choice(ch_games)
            else:
                return None


        # –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∏–≥—Ä—ã –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏–≥—Ä–æ–∫–∞–º
        def get_game_time(value, players=None):
            ch_games = []
            for game in games:
                if game[3] == value:
                    if (players is None) or (game[1] <= players <= game[2]):
                        ch_games.append(game)
            if len(ch_games) > 0:
                return random.choice(ch_games)
            else:
                return None


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @bot.message_handler(commands=['start'])
        def start(message):
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! '
                                              f'\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É –ø–æ —Å–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.'
                                              f'\n–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–¥–µ–ª–∞–π —Å–≤–æ–π –≤—ã–±–æ—Ä!', reply_markup=kb)


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞
        @bot.message_handler(func=lambda message: message.text == '–°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞ üé∞')
        def random_game(message):
            game = random.choice(games)
            bot.send_message(message.chat.id, f'–¢–≤–æ—è —Å–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞: <u>{game[0]}</u>', parse_mode='html',
                             reply_markup=kb_exit)


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
        @bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üï∞Ô∏è')
        def choice_timing(message):
            bot.send_message(message.chat.id, f'{message.from_user.username}, –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã! '
                                              f'\n'
                                              f'\n<u>–ù–µ–±–æ–ª—å—à–∞—è –ø–∞–º—è—Ç–∫–∞</u>:'
                                              f'\n<b>–ë—ã—Å—Ç—Ä–∞—è üèÉ</b> - –¥–æ 30 –º–∏–Ω—É—Ç;'
                                              f'\n<b>–°—Ä–µ–¥–Ω—è—è üö∂</b> - –æ—Ç 30 –¥–æ 60 –º–∏–Ω—É—Ç;'
                                              f'\n<b>–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω</b> –æ—Ç 60 –º–∏–Ω—É—Ç', parse_mode='html',
                             reply_markup=kb_timing)
            bot.register_next_step_handler(message, time_game)


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–øo–∫ –ë—ã—Å—Ç—Ä–∞—è, –°—Ä–µ–¥–Ω—è—è, –î–æ–ª–≥–∞—è
        def time_game(message):
            ph_choice = open('img/choice.jpeg', 'rb')
            value = message.text
            if any(keyword in value for keyword in ["–ë—ã—Å—Ç—Ä–∞—è üèÉ", "–°—Ä–µ–¥–Ω—è—è üö∂", "–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω"]):
                bot.send_photo(message.chat.id, ph_choice,
                               f'–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–≥—Ä—É',
                               reply_markup=kb_random_timing)
                bot.register_next_step_handler(message, lambda msg: duration_players_input(msg, value))
            else:
                bot.send_message(message.chat.id,
                                 '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ',
                                 reply_markup=kb_exit)
                bot.register_next_step_handler(message, start)


        def duration_players_input(message, value):
            if message.text == '–°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞ üé∞':
                game = get_game_time(value)
                if isinstance(game, list):
                    bot.send_message(message.chat.id, f'–¢–≤–æ—è –∏–≥—Ä–∞: <u>{game[0]}</u>', parse_mode='html',
                                     reply_markup=kb_exit)
                else:
                    bot.send_message(message.chat.id, '–ò–≥—Ä—É –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å, –í–∞–º –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ.',
                                     reply_markup=kb_exit)
            else:
                try:
                    players = int(message.text.strip())
                    if players > 0:
                        game = get_game_time(value, players)
                        if game is not None:
                            bot.send_message(message.chat.id, f'–í–æ—Ç —Ç–≤–æ—è –∏–≥—Ä–∞: <u>{game[0]}</u>', parse_mode='html',
                                             reply_markup=kb_exit)
                        else:
                            bot.send_message(message.chat.id, '–ò–≥—Ä—É –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å, –í–∞–º –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ.',
                                             reply_markup=kb_exit)
                except ValueError:
                    ph_pl = open('img/players.jpeg', 'rb')
                    bot.send_photo(message.chat.id, ph_pl, '–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:')
                    bot.register_next_step_handler(message, lambda msg: duration_players_input(msg, value))


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        @bot.message_handler(func=lambda message: message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ üë®‚Äçüë©‚Äçüëß‚Äçüë¶')
        def members(message):
            ph_pl = open('img/players.jpeg', 'rb')
            bot.send_photo(message.chat.id, ph_pl, '–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤:')
            bot.register_next_step_handler(message, get_members)


        def get_members(message):
            players = int(message.text)
            game_ch = get_game(players)
            if game_ch:
                bot.send_message(message.chat.id, f'–¢–≤–æ—è –∏–≥—Ä–∞: <u>{game_ch}</u>', parse_mode='html',
                                 reply_markup=kb_exit)
            else:
                bot.send_message(message.chat.id, '–ë–æ–ª—Ç—ã, –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', reply_markup=kb_exit)


        # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ
        @bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô')
        def restart(message):
            bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ. "
                                              "\n–ë—É–¥—å –ª–∞–ø–æ—á–∫–æ–π, —É–¥–∞—Ä—å –ø–æ –∫–Ω–æ–ø–∫–µ ‚ò∫", reply_markup=kb)


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, –Ω–µ –ø–æ –¥–µ–ª—É
        @bot.message_handler(func=lambda message: message.text != ['–°–ª—É—á–∞–π–Ω–∞—è –∏–≥—Ä–∞ üé∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
                                                                   '–í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üï∞Ô∏è', '–ë—ã—Å—Ç—Ä–∞—è üèÉ',
                                                                   '–°—Ä–µ–¥–Ω—è—è üö∂', '–î–æ–ª–≥–∞—è üßë‚Äçü¶Ω', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üîô'])
        def exception(message):
            photo = open('img/ditch.jpeg', 'rb')
            bot.send_photo(message.chat.id, photo, '–¢—ã –≤—Ç–∏—Ä–∞–µ—à—å –∫–∞–∫—É—é-—Ç–æ –¥–∏—á—å. \n–í–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=kb_exit)


        bot.polling(none_stop=True)
    except Exception as e:
        print('Error: ', e)
        print('Bot restart...')
        time.sleep(5)